using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.IO;
using System.Runtime.InteropServices;
namespace hist_mmorpg
{
    public class LogInManager
    {
        RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();
        HashAlgorithm hash = new SHA256Managed();
        
        Dictionary<string, Tuple<byte[], byte[]>> users = new Dictionary<string, Tuple<byte[], byte[]>>();
        
        /// <summary>
        /// Gets a random salt for use in hashing
        /// </summary>
        /// <param name="bytes">size of resulting salt</param>
        /// <returns>salt</returns>
        public byte[] GetRandomSalt(int bytes)
        {
            byte[] salt = new byte[bytes];
            crypto.GetBytes(salt);
            return salt;
        }

        /// <summary>
        /// Computes the hash of a salt appended to source byte array
        /// </summary>
        /// <param name="toHash">bytes to be hashed</param>
        /// <param name="salt">salt</param>
        /// <returns>computed hash</returns>
        public byte[] ComputeHash(byte[] toHash,byte[]salt)
        {
            byte[] fullHash = new byte[toHash.Length+salt.Length];
            toHash.CopyTo(fullHash,0);
            salt.CopyTo(fullHash,toHash.Length);
            byte[] hashcode = hash.ComputeHash(fullHash);
            return hashcode;
        }

        /// <summary>
        /// Store a new user in the database
        /// </summary>
        /// <param name="username">Username</param>
        /// <param name="pass">Password. Note this isn't stored, only the hash and salt are</param>
        public void StoreNewUser(string username, string pass)
        {
            byte[] passBytes = Encoding.UTF8.GetBytes(pass);
            byte[] salt = GetRandomSalt(32);
            byte[] hash = ComputeHash(passBytes,salt);
            users.Add(username, new Tuple<byte[], byte[]>(hash, salt));
        }

        /// <summary>
        /// Retrieve password hash from database
        /// </summary>
        /// <param name="username">Username</param>
        /// <returns>password hash</returns>
        public byte[] GetPasswordHash(string username)
        {
            Tuple<byte[],byte[]> hashNsalt;
            if (users.TryGetValue(username, out hashNsalt))
            {
                return hashNsalt.Item1;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve salt used when hashing password from database
        /// </summary>
        /// <param name="username">username</param>
        /// <returns>salt</returns>
        public byte[] GetUserSalt(string username)
        {
            Tuple<byte[], byte[]> hashNsalt;
            if (users.TryGetValue(username, out hashNsalt))
            {
                return hashNsalt.Item2;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Verify the identity of a user by computing and comparing password hashes
        /// </summary>
        /// <param name="username">username</param>
        /// <param name="userhash">hash generated by client</param>
        /// <param name="sessionSalt">this session's salt</param>
        /// <returns></returns>
        public bool VerifyUser(string username, byte[] userhash, byte[] sessionSalt)
        {
            byte[] passwordHash = ComputeHash(GetPasswordHash(username),sessionSalt);
            Console.WriteLine("Userhash: ");
            foreach (byte b in userhash)
            {
                Console.Write(b.ToString());
            }
            Console.WriteLine("passwordHash: ");
            foreach (byte b in passwordHash)
            {
                Console.Write(b.ToString());
            }
            return userhash.SequenceEqual(passwordHash);
        }

        /// <summary>
        /// test function
        /// </summary>
        /// <param name="user">username</param>
        /// <param name="pass">password</param>
        public void TestVerify(string user, string pass)
        {
            StoreNewUser(user, pass);
            byte[] sessionSalt = GetRandomSalt(32);
            byte[] passSalt = GetUserSalt(user);
            if (passSalt == null)
            {
                Console.WriteLine("error getting random hash");
                return;
            }
            byte[] passbytes = Encoding.UTF8.GetBytes(pass);
            byte[] hashPassword = ComputeHash(passbytes, passSalt);
          
            byte[] clientHash = ComputeHash(hashPassword, sessionSalt);
            if (!VerifyUser(user, clientHash, sessionSalt))
            {
                Console.WriteLine("Not verified");
            }
            else
            {
                Console.WriteLine("Verified");
            }
        }

        public ECDiffieHellmanCng GetDH()
        {
            ECDiffieHellmanCng newDH = new ECDiffieHellmanCng();
            newDH.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
            newDH.HashAlgorithm = CngAlgorithm.Sha256;
            return newDH;
        }
    }
}
