using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.IO;
using Lidgren.Network;
using System.Security.Cryptography.X509Certificates;
using System.Diagnostics.Contracts;

namespace hist_mmorpg
{
    public static class LogInManager
    {
        static RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();
        static HashAlgorithm hash = new SHA256Managed();
        private static Dictionary<string, byte[]> sessionSalts = new Dictionary<string, byte[]>();
        /// <summary>
        /// Dictionary mapping player username to password hash and salt- for use during testing, should use database for final. First byte array is hash, second is salt
        /// </summary>
        public static Dictionary<string, Tuple<byte[], byte[]>> users = new Dictionary<string, Tuple<byte[], byte[]>>();
        public static X509Certificate2 ServerCert
        {
            get; set;
        }
        private static RSACryptoServiceProvider rsa;

        /// <summary>
        /// Gets a random salt for use in hashing
        /// </summary>
        /// <param name="bytes">size of resulting salt</param>
        /// <returns>salt</returns>
        [ContractVerification(true)]
        public static byte[] GetRandomSalt(int bytes)
        {
            Contract.Requires(bytes>0);
            Contract.Ensures(Contract.Result<byte[]>() != null);
            byte[] salt = new byte[bytes];
            crypto.GetBytes(salt);
            return salt;
        }

        /// <summary>
        /// Computes the hash of a salt appended to source byte array
        /// </summary>
        /// <param name="toHash">bytes to be hashed</param>
        /// <param name="salt">salt</param>
        /// <returns>computed hash</returns>
        [ContractVerification(true)]
        public static byte[] ComputeHash(byte[] toHash, byte[] salt)
        {
            Contract.Requires(toHash!=null&salt!=null);
            Contract.Ensures(Contract.Result<byte[]>()!=null);
            byte[] fullHash = new byte[toHash.Length + salt.Length];
            toHash.CopyTo(fullHash, 0);
            salt.CopyTo(fullHash, toHash.Length);
            byte[] hashcode = hash.ComputeHash(fullHash);
            return hashcode;
        }

        /// <summary>
        /// Store a new user in the database
        /// </summary>
        /// <param name="username">Username</param>
        /// <param name="pass">Password. Note this isn't stored, only the hash and salt are</param>
        [ContractVerification(true)]
        public static void StoreNewUser(string username, string pass)
        {
            Contract.Requires(username!=null&&pass!=null);
            Contract.Ensures(users.ContainsKey(username));
            byte[] passBytes = Encoding.UTF8.GetBytes(pass);
            byte[] salt = GetRandomSalt(32);
            byte[] hash = ComputeHash(passBytes, salt);
            users.Add(username, new Tuple<byte[], byte[]>(hash, salt));
        }

        /// <summary>
        /// Retrieve password hash from database
        /// </summary>
        /// <param name="username">Username</param>
        /// <returns>password hash</returns>
        public static byte[] GetPasswordHash(string username)
        {
            Tuple<byte[], byte[]> hashNsalt;
            if (users.TryGetValue(username, out hashNsalt))
            {
                return hashNsalt.Item1;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve salt used when hashing password from database
        /// </summary>
        /// <param name="username">username</param>
        /// <returns>salt</returns>
        public static byte[] GetUserSalt(string username)
        {
            Tuple<byte[], byte[]> hashNsalt;
            if (users.TryGetValue(username, out hashNsalt))
            {
                return hashNsalt.Item2;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Verify the identity of a user by computing and comparing password hashes
        /// </summary>
        /// <param name="username">username</param>
        /// <param name="userhash">hash generated by client</param>
        /// <param name="sessionSalt">this session's salt</param>
        /// <returns></returns>
        [ContractVerification(true)]
        public static bool VerifyUser(string username, byte[] userhash)
        {
            Contract.Requires(username!=null);
            Contract.Requires(userhash!=null);
            byte[] sessionSalt;
            if (!sessionSalts.TryGetValue(username, out sessionSalt))
            {
                return false;
            }
            byte[] passwordHash = ComputeHash(GetPasswordHash(username), sessionSalt);
            if(userhash!=null && passwordHash!= null)
            {
                return userhash.SequenceEqual(passwordHash);
            }
            return false;
        }
        /// <summary>
        /// Determines whether or not to accept the connection based on whether a user's username is recognised, and constructs a ProtoLogIn containing session salt
        /// </summary>
        /// <param name="client"></param>
        /// <param name="response"></param>
        /// <returns></returns>
        public static bool AcceptConnection(Client client, out ProtoLogIn response)
        {
            byte[] sessionSalt = GetRandomSalt(32);
            byte[] userSalt = GetUserSalt(client.username);
            if (userSalt == null)
            {
                response = null;
                return false;
            }
            response = new ProtoLogIn();
            response.sessionSalt = sessionSalt;
            if (!sessionSalts.ContainsKey(client.username))
            {
                sessionSalts.Add(client.username, sessionSalt);
            }
            else
            {
                sessionSalts[client.username] = sessionSalt;
            }
            response.userSalt = userSalt;
            response.ActionType = Actions.LogIn;
            if (ServerCert != null)
            {
                response.certificate = ServerCert.GetRawCertData();
            }
            return true;
        }
        [ContractVerification(true)]
        public static bool InitialiseCertificateAndRSA(string path)
        {
            try
            {
                path = Path.Combine(path, "ServerCert.pfx");


            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                return false;
            }
            ServerCert =
                    new X509Certificate2(path, "zip1020");
            X509Chain chain = new X509Chain();
            chain.ChainPolicy.RevocationFlag = X509RevocationFlag.EndCertificateOnly;
            chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;
            // Set up asymmetric decryption algorithm

            rsa = (RSACryptoServiceProvider)ServerCert.PrivateKey;
            return true;
        }

        [ContractVerification(true)]
        public static bool ProcessLogIn(ProtoLogIn login, Client c)
        {
            Contract.Requires(c!=null&&login!=null);
            if (!VerifyUser(c.username, login.userSalt))
            {
                // error
                return false;
            }
            try
            {
                byte[] key = rsa.Decrypt(login.Key, false);
                // Key must be non-null and long enough
                if (key == null || key.Length < 5)
                {
                    return false;
                }
                c.alg = new NetAESEncryption(Globals_Server.server, key, 0, key.Length);
                ProtoClient clientDetails = new ProtoClient(c);
                clientDetails.ActionType = Actions.LogIn;
                clientDetails.ResponseType = DisplayMessages.LogInSuccess;
                Server.SendViaProto(clientDetails, c.conn, c.alg);
                Globals_Game.RegisterObserver(c);
                return true;
            }
            catch (Exception e)
            {
                Console.WriteLine("Failure during decryption: " + e.GetType() + " " + e.Message + ";" + e.StackTrace);
                return false;
            }
        }
    }
}
